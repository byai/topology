'use strict';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const diff = require('jest-diff');

const snapshot = require('jest-snapshot');

const prettyFormat = require('pretty-format');

const ReactElement = prettyFormat.plugins.ReactElement;
const reactElement = Symbol.for('react.element');
const defaultOptions = {
  expand: false,
  colors: false,
  contextLines: -1,
  // Forces to use default from Jest
  stablePatchmarks: false,
  aAnnotation: 'First value',
  bAnnotation: 'Second value'
};
const SNAPSHOT_TITLE = 'Snapshot Diff:\n';

const snapshotDiff = (valueA, valueB, options) => {
  let difference;

  const mergedOptions = _objectSpread({}, defaultOptions, options);

  if (isReactComponent(valueA) && isReactComponent(valueB)) {
    difference = diffReactComponents(valueA, valueB, mergedOptions);
  } else {
    difference = diffStrings(valueA, valueB, mergedOptions);
  }

  if (!mergedOptions.colors) {
    const stripAnsi = require('strip-ansi');

    difference = stripAnsi(difference);
  }

  if (mergedOptions.stablePatchmarks && !mergedOptions.expand) {
    difference = difference.replace(/^@@ -[0-9]+,[0-9]+ \+[0-9]+,[0-9]+ @@$/gm, '@@ --- --- @@');
  }

  return SNAPSHOT_TITLE + difference;
};

const isReactComponent = value => value && value.$$typeof === reactElement;

function diffStrings(valueA, valueB, options) {
  return diff(valueA, valueB, {
    expand: options.expand,
    contextLines: options.contextLines,
    aAnnotation: options.aAnnotation,
    bAnnotation: options.bAnnotation
  });
}

function requireReactTestRenderer() {
  try {
    return require('react-test-renderer'); // eslint-disable-line import/no-extraneous-dependencies
  } catch (error) {
    if (error.code === 'MODULE_NOT_FOUND') {
      throw new Error(`Failed to load optional module "react-test-renderer". ` + `If you need to compare React elements, please add "react-test-renderer" to your ` + `project's dependencies.\n` + `${error.message}`);
    }

    throw error;
  }
}

function diffReactComponents(valueA, valueB, options) {
  const renderer = requireReactTestRenderer();
  const reactValueA = renderer.create(valueA).toJSON();
  const reactValueB = renderer.create(valueB).toJSON();
  const prettyFormatOptions = {
    plugins: [ReactElement],
    min: true
  };
  return diff(reactValueA, reactValueB, {
    expand: options.expand,
    contextLines: options.contextLines,
    aAnnotation: prettyFormat(valueA, prettyFormatOptions),
    bAnnotation: prettyFormat(valueB, prettyFormatOptions)
  });
}

function toMatchDiffSnapshot(valueA, valueB, options, testName) {
  const difference = snapshotDiff(valueA, valueB, options);
  return snapshot.toMatchSnapshot.call(this, difference, testName);
}

function getSnapshotDiffSerializer() {
  return {
    test(value) {
      return typeof value === 'string' && value.indexOf(SNAPSHOT_TITLE) === 0;
    },

    print(value) {
      return value;
    }

  };
}

module.exports = snapshotDiff;
module.exports.snapshotDiff = snapshotDiff;
module.exports.toMatchDiffSnapshot = toMatchDiffSnapshot;
module.exports.getSnapshotDiffSerializer = getSnapshotDiffSerializer;