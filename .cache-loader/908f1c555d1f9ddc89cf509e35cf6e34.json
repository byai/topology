{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/tree.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/tree.ts","mtime":1685345930682},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1685951404367},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1684841559863},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1684841570187},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1684835071408},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1684841566493}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nimport { createHashFromObjectArray } from '.';\n\n/** 只含有单个root节点 */\nexport var onlyOneRoot = function onlyOneRoot(data) {\n  var lines = data.lines,\n    nodes = data.nodes;\n  if (nodes.length <= 1) {\n    return true;\n  }\n  var lineHashByEnd = lines.reduce(function (pre, cur) {\n    return _objectSpread({}, pre, _defineProperty({}, cur.end, cur));\n  }, {});\n  return nodes.filter(function (item) {\n    return !lineHashByEnd[item.id];\n  }).length === 1;\n};\n\n/** 单个父节点 */\nexport var onlyOneParent = function onlyOneParent(data) {\n  var lines = data.lines;\n  var lineEndHash = {};\n  for (var i = 0; i < lines.length; i += 1) {\n    var _lines$i = lines[i],\n      start = _lines$i.start,\n      end = _lines$i.end;\n    var parent = start.split('-')[0];\n    if (!lineEndHash[end]) {\n      lineEndHash[end] = parent;\n    } else if (lineEndHash[end] !== parent) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/** 判断树是否有环 */\nexport var hasRing = function hasRing(data) {\n  var flagHash = {};\n  var findRing = function findRing(node) {\n    var id = \"\".concat(node.id);\n    if (!flagHash[id]) {\n      flagHash[id] = node;\n      if (Array.isArray(node.childrenList)) {\n        for (var i = 0; i < node.childrenList.length; i += 1) {\n          if (findRing(node.childrenList[i])) {\n            return true;\n          }\n        }\n        return false;\n      }\n      return false;\n    }\n    return true;\n  };\n  return findRing(data);\n};\nexport var processTree = function processTree(root, process) {\n  if (Array.isArray(root.childrenList)) {\n    // eslint-disable-next-line no-param-reassign\n    root.childrenList = root.childrenList.map(function (children) {\n      return processTree(children, process);\n    });\n  }\n  return process(root);\n};\n/** 将数据转化为树结构 */\nexport var convertToTree = function convertToTree(_ref, process) {\n  var nodes = _ref.nodes,\n    lines = _ref.lines;\n  var nodeHash = createHashFromObjectArray(nodes, 'id');\n  var lineEndHash = createHashFromObjectArray(lines, 'end');\n  var relationShipHash = lines.reduce(function (pre, cur) {\n    var relationHash = pre.relationHash,\n      childrenListHash = pre.childrenListHash;\n    var _cur$start$split = cur.start.split('-'),\n      _cur$start$split2 = _slicedToArray(_cur$start$split, 2),\n      parent = _cur$start$split2[0],\n      anchor = _cur$start$split2[1];\n    if (!Array.isArray(childrenListHash[parent])) {\n      childrenListHash[parent] = [];\n    }\n    if (!relationHash[cur.end]) {\n      relationHash[cur.end] = {\n        parent: parent,\n        anchors: []\n      };\n    }\n    var relation = _objectSpread({}, relationHash[cur.end], {\n      anchors: [].concat(_toConsumableArray(relationHash[cur.end].anchors), [anchor])\n    });\n    var childrenList = _.uniq([].concat(_toConsumableArray(childrenListHash[parent]), [cur.end]));\n    return {\n      relationHash: _objectSpread({}, relationHash, _defineProperty({}, cur.end, relation)),\n      childrenListHash: _objectSpread({}, childrenListHash, _defineProperty({}, parent, childrenList))\n    };\n  }, {\n    relationHash: {},\n    childrenListHash: {}\n  });\n  nodes.forEach(function (item) {\n    var childrenListHash = relationShipHash.childrenListHash,\n      relationHash = relationShipHash.relationHash;\n    if (Array.isArray(childrenListHash[\"\".concat(item.id)])) {\n      // eslint-disable-next-line no-param-reassign\n      item.childrenList = childrenListHash[\"\".concat(item.id)].map(function (nodeId) {\n        nodeHash[nodeId].anchors = relationHash[nodeId].anchors;\n        nodeHash[nodeId].parent = relationHash[nodeId].parent;\n        return nodeHash[nodeId];\n      });\n    }\n  });\n  var root = nodes.find(function (item) {\n    return !lineEndHash[\"\".concat(item.id)];\n  });\n  if (!root) {\n    return null;\n  }\n  if (process) {\n    root = processTree(root, process);\n  }\n  return root;\n};",{"version":3,"names":["_","createHashFromObjectArray","onlyOneRoot","data","lines","nodes","length","lineHashByEnd","reduce","pre","cur","_objectSpread","_defineProperty","end","filter","item","id","onlyOneParent","lineEndHash","i","_lines$i","start","parent","split","hasRing","flagHash","findRing","node","concat","Array","isArray","childrenList","processTree","root","process","map","children","convertToTree","_ref","nodeHash","relationShipHash","relationHash","childrenListHash","_cur$start$split","_cur$start$split2","_slicedToArray","anchor","anchors","relation","_toConsumableArray","uniq","forEach","nodeId","find"],"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/tree.ts"],"sourcesContent":["import _ from 'lodash';\nimport { ITopologyNode, ITopologyData, ITopologyLine } from '../declare';\nimport { createHashFromObjectArray } from '.';\n\n/** 只含有单个root节点 */\nexport const onlyOneRoot = (data: ITopologyData) => {\n    const { lines, nodes } = data;\n    if (nodes.length <= 1) {\n        return true;\n    }\n    const lineHashByEnd = lines.reduce((pre, cur) => ({ ...pre, [cur.end]: cur }), {}) as { [id: string]: ITopologyLine };\n    return nodes.filter(item => !lineHashByEnd[item.id]).length === 1;\n};\n\n/** 单个父节点 */\nexport const onlyOneParent = (data: ITopologyData) => {\n    const { lines } = data;\n    const lineEndHash = {} as { [id: string]: string };\n    for (let i = 0; i < lines.length; i += 1) {\n        const { start, end } = lines[i];\n        const parent = start.split('-')[0];\n        if (!lineEndHash[end]) {\n            lineEndHash[end] = parent;\n        } else if (lineEndHash[end] !== parent) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/** 判断树是否有环 */\nexport const hasRing = (data: ITopologyNode) => {\n    const flagHash = {} as { [id: string]: ITopologyNode };\n    const findRing = (node: ITopologyNode) => {\n        const id = `${node.id}`;\n        if (!flagHash[id]) {\n            flagHash[id] = node;\n            if (Array.isArray(node.childrenList)) {\n                for (let i = 0; i < node.childrenList.length; i += 1) {\n                    if (findRing(node.childrenList[i])) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return false;\n        }\n        return true;\n    };\n    return findRing(data);\n};\n\nexport const processTree = (root: ITopologyNode, process: (dataF: ITopologyNode) => ITopologyNode) => {\n    if (Array.isArray(root.childrenList)) {\n        // eslint-disable-next-line no-param-reassign\n        root.childrenList = root.childrenList.map(\n            (children: ITopologyNode) => processTree(children, process),\n        );\n    }\n    return process(root);\n};\n\ninterface RelationHash {\n    relationHash: { [id: string]: { parent: string; anchors: string[] } };\n    childrenListHash: { [id: string]: string[] };\n}\n\n/** 将数据转化为树结构 */\nexport const convertToTree = (\n    { nodes, lines }: ITopologyData,\n    process?: (data: ITopologyNode) => ITopologyNode,\n) => {\n    const nodeHash = createHashFromObjectArray(nodes, 'id') as { [id: string]: ITopologyNode };\n    const lineEndHash = createHashFromObjectArray(lines, 'end') as { [id: string]: ITopologyLine };\n    const relationShipHash = lines.reduce((pre: RelationHash, cur) => {\n        const { relationHash, childrenListHash } = pre;\n        const [parent, anchor] = cur.start.split('-');\n        if (!Array.isArray(childrenListHash[parent])) {\n            childrenListHash[parent] = [];\n        }\n        if (!relationHash[cur.end]) {\n            relationHash[cur.end] = { parent, anchors: [] };\n        }\n        const relation = {\n            ...relationHash[cur.end],\n            anchors: [...relationHash[cur.end].anchors, anchor],\n        };\n        const childrenList = _.uniq([...childrenListHash[parent], cur.end]);\n        return {\n            relationHash: { ...relationHash, [cur.end]: relation },\n            childrenListHash: { ...childrenListHash, [parent]: childrenList },\n        };\n    }, { relationHash: {}, childrenListHash: {} }) as RelationHash;\n\n    nodes.forEach((item) => {\n        const { childrenListHash, relationHash } = relationShipHash;\n        if (Array.isArray(childrenListHash[`${item.id}`])) {\n            // eslint-disable-next-line no-param-reassign\n            item.childrenList = childrenListHash[`${item.id}`].map((nodeId: string) => {\n                nodeHash[nodeId].anchors = relationHash[nodeId].anchors;\n                nodeHash[nodeId].parent = relationHash[nodeId].parent;\n                return nodeHash[nodeId];\n            });\n        }\n    });\n    let root = nodes.find(item => !lineEndHash[`${item.id}`]);\n    if (!root) {\n        return null;\n    }\n    if (process) {\n        root = processTree(root, process);\n    }\n    return root;\n};\n"],"mappings":";;;;AAAA,OAAOA,CAAC,MAAM,QAAQ;AAEtB,SAASC,yBAAyB,QAAQ,GAAG;;AAE7C;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAmB,EAAK;EAAA,IACxCC,KAAK,GAAYD,IAAI,CAArBC,KAAK;IAAEC,KAAK,GAAKF,IAAI,CAAdE,KAAK;EACpB,IAAIA,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;IACnB,OAAO,IAAI;EACf;EACA,IAAMC,aAAa,GAAGH,KAAK,CAACI,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG;IAAA,OAAAC,aAAA,KAAWF,GAAG,EAAAG,eAAA,KAAGF,GAAG,CAACG,GAAG,EAAGH,GAAG;EAAA,CAAG,EAAE,CAAC,CAAC,CAAoC;EACrH,OAAOL,KAAK,CAACS,MAAM,CAAC,UAAAC,IAAI;IAAA,OAAI,CAACR,aAAa,CAACQ,IAAI,CAACC,EAAE,CAAC;EAAA,EAAC,CAACV,MAAM,KAAK,CAAC;AACrE,CAAC;;AAED;AACA,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAaA,CAAId,IAAmB,EAAK;EAAA,IAC1CC,KAAK,GAAKD,IAAI,CAAdC,KAAK;EACb,IAAMc,WAAW,GAAG,CAAC,CAA6B;EAClD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,KAAK,CAACE,MAAM,EAAEa,CAAC,IAAI,CAAC,EAAE;IAAA,IAAAC,QAAA,GACfhB,KAAK,CAACe,CAAC,CAAC;MAAvBE,KAAK,GAAAD,QAAA,CAALC,KAAK;MAAER,GAAG,GAAAO,QAAA,CAAHP,GAAG;IAClB,IAAMS,MAAM,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,IAAI,CAACL,WAAW,CAACL,GAAG,CAAC,EAAE;MACnBK,WAAW,CAACL,GAAG,CAAC,GAAGS,MAAM;IAC7B,CAAC,MAAM,IAAIJ,WAAW,CAACL,GAAG,CAAC,KAAKS,MAAM,EAAE;MACpC,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf,CAAC;;AAED;AACA,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAOA,CAAIrB,IAAmB,EAAK;EAC5C,IAAMsB,QAAQ,GAAG,CAAC,CAAoC;EACtD,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,IAAmB,EAAK;IACtC,IAAMX,EAAE,MAAAY,MAAA,CAAMD,IAAI,CAACX,EAAE,CAAE;IACvB,IAAI,CAACS,QAAQ,CAACT,EAAE,CAAC,EAAE;MACfS,QAAQ,CAACT,EAAE,CAAC,GAAGW,IAAI;MACnB,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAACI,YAAY,CAAC,EAAE;QAClC,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,IAAI,CAACI,YAAY,CAACzB,MAAM,EAAEa,CAAC,IAAI,CAAC,EAAE;UAClD,IAAIO,QAAQ,CAACC,IAAI,CAACI,YAAY,CAACZ,CAAC,CAAC,CAAC,EAAE;YAChC,OAAO,IAAI;UACf;QACJ;QACA,OAAO,KAAK;MAChB;MACA,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf,CAAC;EACD,OAAOO,QAAQ,CAACvB,IAAI,CAAC;AACzB,CAAC;AAED,OAAO,IAAM6B,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAmB,EAAEC,OAAgD,EAAK;EAClG,IAAIL,KAAK,CAACC,OAAO,CAACG,IAAI,CAACF,YAAY,CAAC,EAAE;IAClC;IACAE,IAAI,CAACF,YAAY,GAAGE,IAAI,CAACF,YAAY,CAACI,GAAG,CACrC,UAACC,QAAuB;MAAA,OAAKJ,WAAW,CAACI,QAAQ,EAAEF,OAAO,CAAC;IAAA,CAC/D,CAAC;EACL;EACA,OAAOA,OAAO,CAACD,IAAI,CAAC;AACxB,CAAC;AAOD;AACA,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAEtBJ,OAAgD,EAC/C;EAAA,IAFC7B,KAAK,GAAAiC,IAAA,CAALjC,KAAK;IAAED,KAAK,GAAAkC,IAAA,CAALlC,KAAK;EAGd,IAAMmC,QAAQ,GAAGtC,yBAAyB,CAACI,KAAK,EAAE,IAAI,CAAoC;EAC1F,IAAMa,WAAW,GAAGjB,yBAAyB,CAACG,KAAK,EAAE,KAAK,CAAoC;EAC9F,IAAMoC,gBAAgB,GAAGpC,KAAK,CAACI,MAAM,CAAC,UAACC,GAAiB,EAAEC,GAAG,EAAK;IAAA,IACtD+B,YAAY,GAAuBhC,GAAG,CAAtCgC,YAAY;MAAEC,gBAAgB,GAAKjC,GAAG,CAAxBiC,gBAAgB;IAAA,IAAAC,gBAAA,GACbjC,GAAG,CAACW,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;MAAAqB,iBAAA,GAAAC,cAAA,CAAAF,gBAAA;MAAtCrB,MAAM,GAAAsB,iBAAA;MAAEE,MAAM,GAAAF,iBAAA;IACrB,IAAI,CAACf,KAAK,CAACC,OAAO,CAACY,gBAAgB,CAACpB,MAAM,CAAC,CAAC,EAAE;MAC1CoB,gBAAgB,CAACpB,MAAM,CAAC,GAAG,EAAE;IACjC;IACA,IAAI,CAACmB,YAAY,CAAC/B,GAAG,CAACG,GAAG,CAAC,EAAE;MACxB4B,YAAY,CAAC/B,GAAG,CAACG,GAAG,CAAC,GAAG;QAAES,MAAM,EAANA,MAAM;QAAEyB,OAAO,EAAE;MAAG,CAAC;IACnD;IACA,IAAMC,QAAQ,GAAArC,aAAA,KACP8B,YAAY,CAAC/B,GAAG,CAACG,GAAG,CAAC;MACxBkC,OAAO,KAAAnB,MAAA,CAAAqB,kBAAA,CAAMR,YAAY,CAAC/B,GAAG,CAACG,GAAG,CAAC,CAACkC,OAAO,IAAED,MAAM;IAAC,EACtD;IACD,IAAMf,YAAY,GAAG/B,CAAC,CAACkD,IAAI,IAAAtB,MAAA,CAAAqB,kBAAA,CAAKP,gBAAgB,CAACpB,MAAM,CAAC,IAAEZ,GAAG,CAACG,GAAG,EAAC,CAAC;IACnE,OAAO;MACH4B,YAAY,EAAA9B,aAAA,KAAO8B,YAAY,EAAA7B,eAAA,KAAGF,GAAG,CAACG,GAAG,EAAGmC,QAAQ,EAAE;MACtDN,gBAAgB,EAAA/B,aAAA,KAAO+B,gBAAgB,EAAA9B,eAAA,KAAGU,MAAM,EAAGS,YAAY;IACnE,CAAC;EACL,CAAC,EAAE;IAAEU,YAAY,EAAE,CAAC,CAAC;IAAEC,gBAAgB,EAAE,CAAC;EAAE,CAAC,CAAiB;EAE9DrC,KAAK,CAAC8C,OAAO,CAAC,UAACpC,IAAI,EAAK;IAAA,IACZ2B,gBAAgB,GAAmBF,gBAAgB,CAAnDE,gBAAgB;MAAED,YAAY,GAAKD,gBAAgB,CAAjCC,YAAY;IACtC,IAAIZ,KAAK,CAACC,OAAO,CAACY,gBAAgB,IAAAd,MAAA,CAAIb,IAAI,CAACC,EAAE,EAAG,CAAC,EAAE;MAC/C;MACAD,IAAI,CAACgB,YAAY,GAAGW,gBAAgB,IAAAd,MAAA,CAAIb,IAAI,CAACC,EAAE,EAAG,CAACmB,GAAG,CAAC,UAACiB,MAAc,EAAK;QACvEb,QAAQ,CAACa,MAAM,CAAC,CAACL,OAAO,GAAGN,YAAY,CAACW,MAAM,CAAC,CAACL,OAAO;QACvDR,QAAQ,CAACa,MAAM,CAAC,CAAC9B,MAAM,GAAGmB,YAAY,CAACW,MAAM,CAAC,CAAC9B,MAAM;QACrD,OAAOiB,QAAQ,CAACa,MAAM,CAAC;MAC3B,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF,IAAInB,IAAI,GAAG5B,KAAK,CAACgD,IAAI,CAAC,UAAAtC,IAAI;IAAA,OAAI,CAACG,WAAW,IAAAU,MAAA,CAAIb,IAAI,CAACC,EAAE,EAAG;EAAA,EAAC;EACzD,IAAI,CAACiB,IAAI,EAAE;IACP,OAAO,IAAI;EACf;EACA,IAAIC,OAAO,EAAE;IACTD,IAAI,GAAGD,WAAW,CAACC,IAAI,EAAEC,OAAO,CAAC;EACrC;EACA,OAAOD,IAAI;AACf,CAAC"}]}