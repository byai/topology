{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/declare.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/declare.ts","mtime":1686036806791},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1685951404367},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1684841559863},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1684841570187},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1684835071408},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1684841566493}],"contextDependencies":[],"result":["export var ChangeType = /*#__PURE__*/function (ChangeType) {\n  ChangeType[ChangeType[\"ADD_NODE\"] = 0] = \"ADD_NODE\";\n  ChangeType[ChangeType[\"ADD_LINE\"] = 1] = \"ADD_LINE\";\n  ChangeType[ChangeType[\"LAYOUT\"] = 2] = \"LAYOUT\";\n  ChangeType[ChangeType[\"DELETE\"] = 3] = \"DELETE\";\n  ChangeType[ChangeType[\"EDIT_LINE\"] = 4] = \"EDIT_LINE\";\n  ChangeType[ChangeType[\"EDIT_NODE\"] = 5] = \"EDIT_NODE\";\n  ChangeType[ChangeType[\"ADD_COMPONENT\"] = 6] = \"ADD_COMPONENT\";\n  return ChangeType;\n}({});\nexport var NodeTypes = /*#__PURE__*/function (NodeTypes) {\n  NodeTypes[\"NORMAL_NODE\"] = \"\\u666E\\u901A\\u8282\\u70B9\";\n  NodeTypes[\"TEMPLATE_NODE\"] = \"\\u6A21\\u677F\\u8282\\u70B9\";\n  NodeTypes[\"ANCHOR\"] = \"\\u951A\\u70B9\";\n  NodeTypes[\"LINE_POINT\"] = \"\\u7EBF\\u6BB5\\u70B9\";\n  return NodeTypes;\n}({});\nexport var KeyCode = /*#__PURE__*/function (KeyCode) {\n  KeyCode[KeyCode[\"BACKSPACE\"] = 8] = \"BACKSPACE\";\n  KeyCode[KeyCode[\"DELETE\"] = 46] = \"DELETE\";\n  return KeyCode;\n}({});\n/** 选中元素类型 */\nexport var SelectedType = /*#__PURE__*/function (SelectedType) {\n  SelectedType[SelectedType[\"NODE\"] = 0] = \"NODE\";\n  SelectedType[SelectedType[\"LINE\"] = 1] = \"LINE\";\n  SelectedType[SelectedType[\"NONE\"] = 2] = \"NONE\";\n  return SelectedType;\n}({});\n\n/** 编辑类型\n * ADD: 新增\n * EDIT_START: 编辑起点\n * EDIT_END: 编辑终点\n */\nexport var LineEditType = /*#__PURE__*/function (LineEditType) {\n  LineEditType[\"ADD\"] = \"add\";\n  LineEditType[\"EDIT_START\"] = \"start\";\n  LineEditType[\"EDIT_END\"] = \"end\";\n  return LineEditType;\n}({});",{"version":3,"names":["ChangeType","NodeTypes","KeyCode","SelectedType","LineEditType"],"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/declare.ts"],"sourcesContent":["import { ReactNode } from 'react';\n\nexport enum ChangeType {\n    'ADD_NODE',\n    'ADD_LINE',\n    'LAYOUT',\n    'DELETE',\n    'EDIT_LINE',\n    'EDIT_NODE',\n    'ADD_COMPONENT'\n}\n\nexport enum NodeTypes {\n    NORMAL_NODE = '普通节点',\n    TEMPLATE_NODE = '模板节点',\n    ANCHOR = '锚点',\n    LINE_POINT = '线段点'\n}\n\nexport enum KeyCode {\n    BACKSPACE = 8,\n    DELETE = 46,\n}\n/** 选中元素类型 */\nexport enum SelectedType {\n    NODE,\n    LINE,\n    NONE,\n}\n\n/** 编辑类型\n * ADD: 新增\n * EDIT_START: 编辑起点\n * EDIT_END: 编辑终点\n */\nexport enum LineEditType {\n    ADD = 'add',\n    EDIT_START = 'start',\n    EDIT_END = 'end',\n}\n\nexport interface IPosition {\n    x: number;\n    y: number;\n}\n\nexport interface ITopologyNode {\n    id: string;\n    position?: IPosition;\n    canDrag?: boolean; // 控制节点是否可拖拽\n    dragChild?: boolean; // 设置当前节点下的子节点是否需要联动拖动\n    filterOverlap?: boolean; // 控制节点在设置 overlap 为 true 时是否仍允许被覆盖\n    /** 组件Id */\n    combineId?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [prop: string]: any;\n}\n\nexport interface ITopologyLine {\n    start: string;\n    end: string;\n    color?: string;\n    index?: number; // 线条重复次数\n    /** 组件Id */\n    combineId?: string;\n}\n\nexport interface ITopologyContext {\n    linking: boolean;\n    dragging: boolean;\n    impactNode: string | null;\n    readOnly: boolean;\n    hoverCurrentNode: ITopologyNode;\n    activeLine: {\n        start: IPosition;\n        end: IPosition;\n        type: LineEditType;\n        /** 原始值 */\n        origin: ITopologyLine | null;\n    } | null;\n    activeNode?: string;\n    selectedData: {\n        nodes: ITopologyNode[];\n        lines: ITopologyLine[];\n    };\n}\n\nexport interface ITopologyData {\n    nodes: ITopologyNode[];\n    lines: ITopologyLine[];\n}\n\nexport interface IWrapperOptions {\n    anchorDecorator: (options: { anchorId?: string }) => (item: ReactNode) => ReactNode;\n}\n\nexport type ValuesOf<T> = {\n    [P in keyof T]?: T[P];\n};\n"],"mappings":"AAEA,WAAYA,UAAU,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAUtB,WAAYC,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAOrB,WAAYC,OAAO,0BAAPA,OAAO;EAAPA,OAAO,CAAPA,OAAO;EAAPA,OAAO,CAAPA,OAAO;EAAA,OAAPA,OAAO;AAAA;AAInB;AACA,WAAYC,YAAY,0BAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAZA,YAAY,CAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;;AAMxB;AACA;AACA;AACA;AACA;AACA,WAAYC,YAAY,0BAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA"}]}