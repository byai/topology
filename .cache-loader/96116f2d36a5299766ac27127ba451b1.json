{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/computeLayout.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/computeLayout.ts","mtime":1685428338222},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1685951404367},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1684841559863},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1684841570187},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1684835071408},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1684841566493}],"contextDependencies":[],"result":["/* eslint-disable no-debugger */\n/* eslint-disable no-param-reassign */\nimport _ from 'lodash';\nimport { onlyOneParent, onlyOneRoot, convertToTree } from './tree';\nimport { getNodeSize } from '.';\nimport config from '../config';\nfunction computeClientRect(node) {\n  node.clientRect = getNodeSize(node.id);\n  return node;\n}\nfunction getTreeNode(data) {\n  if (data.nodes.length <= 0) {\n    return null;\n  }\n  // 不满足树的条件\n  if (!onlyOneParent(data) || !onlyOneRoot(data)) {\n    return null;\n  }\n  // 将数组转为树结构，并获取节点的dom大小\n  return convertToTree(data, computeClientRect);\n}\nfunction computeContainerSize(node) {\n  var children = node.childrenList;\n  if (Array.isArray(node.childrenList)) {\n    var childrenSize = children.map(computeContainerSize);\n    var horizontalSpacing = (childrenSize.length - 1) * config.autoLayout.horizontalSpacing;\n    var childrenWidth = _.sumBy(childrenSize, 'width');\n    var childrenHeight = _.maxBy(childrenSize, 'height').height;\n    node.containerRect = {\n      width: Math.max(node.clientRect.width, childrenWidth + horizontalSpacing),\n      height: node.clientRect.height + childrenHeight + config.autoLayout.verticalSpacing\n    };\n  } else {\n    node.containerRect = {\n      width: node.clientRect.width,\n      height: node.clientRect.height\n    };\n  }\n  return _.cloneDeep(node.containerRect);\n}\nfunction computePosition(node, containerPosition, sortChildren) {\n  var containerRect = node.containerRect;\n  var nodeWidth = node.clientRect.width;\n  var nodeHeight = node.clientRect.height;\n  node.position = {\n    // 把节点移动到容器框的中间位置\n    x: containerPosition.x + (containerRect.width - nodeWidth) / 2,\n    y: containerPosition.y\n  };\n  if (Array.isArray(node.childrenList)) {\n    if (sortChildren) {\n      node.childrenList = sortChildren(node, node.childrenList);\n    }\n    var childrenWidth = node.childrenList.reduce(function (pre, cur) {\n      return pre + cur.containerRect.width;\n    }, (node.childrenList.length - 1) * config.autoLayout.horizontalSpacing);\n    var childrenPositionY = node.position.y + nodeHeight + config.autoLayout.verticalSpacing;\n    var childrenPositionX = containerPosition.x + (containerRect.width - childrenWidth) / 2;\n    for (var i = 0; i < node.childrenList.length; i += 1) {\n      var chlid = node.childrenList[i];\n      computePosition(chlid, {\n        x: childrenPositionX,\n        y: childrenPositionY\n      }, sortChildren);\n      childrenPositionX += chlid.containerRect.width + config.autoLayout.horizontalSpacing;\n    }\n  }\n}\nfunction convertTreeToArray(treeNode) {\n  var nodes = [treeNode];\n  for (var i = 0; i < nodes.length; i += 1) {\n    var _childrenList = nodes[i].childrenList; // 删除为计算布局添加的额外属性\n    delete nodes[i].childrenList;\n    delete nodes[i].clientRect;\n    delete nodes[i].containerRect;\n    if (Array.isArray(_childrenList)) {\n      _childrenList.forEach(function (item) {\n        return nodes.push(item);\n      });\n    }\n  }\n  return nodes;\n}\nfunction computeLayout(data, options) {\n  var tree = getTreeNode(data);\n  if (!tree) {\n    return data.nodes;\n  }\n  var containerSize = computeContainerSize(tree);\n  var position = {\n    x: (config.canvas.width - containerSize.width) / 2,\n    y: (config.canvas.height - containerSize.height) / 2\n  };\n  computePosition(tree, position, options ? options.sortChildren : undefined);\n  return convertTreeToArray(tree);\n}\nexport default computeLayout;",{"version":3,"names":["_","onlyOneParent","onlyOneRoot","convertToTree","getNodeSize","config","computeClientRect","node","clientRect","id","getTreeNode","data","nodes","length","computeContainerSize","children","childrenList","Array","isArray","childrenSize","map","horizontalSpacing","autoLayout","childrenWidth","sumBy","childrenHeight","maxBy","height","containerRect","width","Math","max","verticalSpacing","cloneDeep","computePosition","containerPosition","sortChildren","nodeWidth","nodeHeight","position","x","y","reduce","pre","cur","childrenPositionY","childrenPositionX","i","chlid","convertTreeToArray","treeNode","forEach","item","push","computeLayout","options","tree","containerSize","canvas","undefined"],"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/computeLayout.ts"],"sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable no-param-reassign */\nimport _ from 'lodash';\nimport { ITopologyData, ITopologyNode, IPosition } from '../declare';\nimport {\n    onlyOneParent,\n    onlyOneRoot,\n    convertToTree,\n} from './tree';\nimport { getNodeSize } from '.';\nimport config from '../config';\n\ntype SortChilren = (parent: ITopologyNode, childrenList: ITopologyNode[]) => ITopologyNode[];\n\ninterface LayoutOptions {\n    sortChildren?: SortChilren;\n}\n\ninterface RectSize {\n    width: number;\n    height: number;\n}\n\ninterface ContainerRect extends RectSize {\n    position?: IPosition;\n}\n\ninterface TreeNode extends ITopologyNode {\n    clientRect?: ClientRect;\n    containerRect?: ContainerRect;\n    childrenList?: ITopologyNode[];\n}\n\nfunction computeClientRect(node: TreeNode) {\n    node.clientRect = getNodeSize(node.id);\n    return node;\n}\n\nfunction getTreeNode(data: ITopologyData): TreeNode | null {\n    if (data.nodes.length <= 0) {\n        return null;\n    }\n    // 不满足树的条件\n    if (!onlyOneParent(data) || !onlyOneRoot(data)) {\n        return null;\n    }\n    // 将数组转为树结构，并获取节点的dom大小\n    return convertToTree(data, computeClientRect);\n}\n\nfunction computeContainerSize(node: TreeNode): RectSize {\n    const children = node.childrenList;\n\n    if (Array.isArray(node.childrenList)) {\n        const childrenSize = children.map(computeContainerSize);\n        const horizontalSpacing = (childrenSize.length - 1) * config.autoLayout.horizontalSpacing;\n        const childrenWidth = _.sumBy(childrenSize, 'width');\n        const childrenHeight = _.maxBy(childrenSize, 'height').height;\n\n        node.containerRect = {\n            width: Math.max(node.clientRect.width, childrenWidth + horizontalSpacing),\n            height: node.clientRect.height + childrenHeight + config.autoLayout.verticalSpacing,\n        };\n    } else {\n        node.containerRect = {\n            width: node.clientRect.width,\n            height: node.clientRect.height,\n        };\n    }\n    return _.cloneDeep(node.containerRect);\n}\n\nfunction computePosition(node: TreeNode, containerPosition: IPosition, sortChildren?: SortChilren) {\n    const { containerRect } = node;\n    const nodeWidth = node.clientRect.width;\n    const nodeHeight = node.clientRect.height;\n\n    node.position = {\n        // 把节点移动到容器框的中间位置\n        x: containerPosition.x + (containerRect.width - nodeWidth) / 2,\n        y: containerPosition.y,\n    };\n    if (Array.isArray(node.childrenList)) {\n        if (sortChildren) {\n            node.childrenList = sortChildren(node, node.childrenList);\n        }\n        const childrenWidth = node.childrenList.reduce(\n            (pre, cur) => pre + cur.containerRect.width,\n            (node.childrenList.length - 1) * config.autoLayout.horizontalSpacing,\n        );\n        const childrenPositionY = node.position.y + nodeHeight + config.autoLayout.verticalSpacing;\n        let childrenPositionX = containerPosition.x + (containerRect.width - childrenWidth) / 2;\n        for (let i = 0; i < node.childrenList.length; i += 1) {\n            const chlid = node.childrenList[i];\n            computePosition(\n                chlid,\n                { x: childrenPositionX, y: childrenPositionY },\n                sortChildren,\n            );\n            childrenPositionX += (chlid.containerRect.width + config.autoLayout.horizontalSpacing);\n        }\n    }\n}\n\nfunction convertTreeToArray(treeNode: TreeNode): ITopologyNode[] {\n    const nodes: ITopologyNode[] = [treeNode];\n    for (let i = 0; i < nodes.length; i += 1) {\n        const { childrenList } = nodes[i];\n        // 删除为计算布局添加的额外属性\n        delete nodes[i].childrenList;\n        delete nodes[i].clientRect;\n        delete nodes[i].containerRect;\n        if (Array.isArray(childrenList)) {\n            childrenList.forEach(item => nodes.push(item));\n        }\n    }\n    return nodes;\n}\n\nfunction computeLayout(data: ITopologyData, options: LayoutOptions) {\n    const tree = getTreeNode(data);\n    if (!tree) {\n        return data.nodes;\n    }\n    const containerSize = computeContainerSize(tree);\n    const position = {\n        x: (config.canvas.width - containerSize.width) / 2,\n        y: (config.canvas.height - containerSize.height) / 2,\n    };\n    computePosition(tree, position, options ? options.sortChildren : undefined);\n    return convertTreeToArray(tree);\n}\n\nexport default computeLayout;\n"],"mappings":"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"}]}