{"remainingRequest":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js??ref--6-oneOf-1-1!/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1-2!/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js??ref--5-0!/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/selectNodes.ts","dependencies":[{"path":"/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/selectNodes.ts","mtime":1685428338223},{"path":"/Users/zhangtengjin/Desktop/byai/topology/package.json","mtime":1685951404367},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/cache-loader/dist/cjs.js","mtime":1684841559863},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/thread-loader/dist/cjs.js","mtime":1684841570187},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-loader/lib/index.js","mtime":1684835071408},{"path":"/Users/zhangtengjin/Desktop/byai/topology/node_modules/eslint-loader/index.js","mtime":1684841566493}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/zhangtengjin/Desktop/byai/topology/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable no-debugger */\nimport _ from 'lodash';\nimport { isMatchKeyValue } from '.';\nexport var SelectMode = /*#__PURE__*/function (SelectMode) {\n  SelectMode[SelectMode[\"SINGLE\"] = 0] = \"SINGLE\";\n  SelectMode[SelectMode[\"NORMAL\"] = 1] = \"NORMAL\";\n  SelectMode[SelectMode[\"MUL_NORMAL\"] = 2] = \"MUL_NORMAL\";\n  SelectMode[SelectMode[\"MULTI\"] = 3] = \"MULTI\";\n  SelectMode[SelectMode[\"RIGHT_NORMAL\"] = 4] = \"RIGHT_NORMAL\";\n  SelectMode[SelectMode[\"BOX_SELECTION\"] = 5] = \"BOX_SELECTION\";\n  return SelectMode;\n}({});\nfunction getChildren(parent, lines) {\n  return lines.map(function (item) {\n    var _item$start$split = item.start.split('-'),\n      _item$start$split2 = _slicedToArray(_item$start$split, 1),\n      _parent = _item$start$split2[0];\n    if (_parent === parent) {\n      return item.end;\n    }\n    return null;\n  }).filter(function (item) {\n    return item !== null;\n  });\n}\n\n/** 取消选中节点 */\nfunction cancelSelect(params) {\n  var selectedData = params.selectedData,\n    mode = params.mode,\n    node = params.node,\n    nodeList = params.nodeList;\n  if (mode === SelectMode.NORMAL) {\n    return {\n      nodes: [],\n      lines: []\n    };\n  }\n  var currNodeIdSet = new Set(node.id);\n  nodeList.forEach(function (n) {\n    return currNodeIdSet.add(n.id);\n  });\n  var lines = selectedData.lines.filter(function (item) {\n    if (currNodeIdSet.has(item.end)) {\n      return false;\n    }\n    if (currNodeIdSet.has(item.start.split('-')[0])) {\n      return false;\n    }\n    return true;\n  });\n  var nodes;\n  if (mode === SelectMode.MUL_NORMAL || mode === SelectMode.BOX_SELECTION) {\n    nodes = selectedData.nodes.filter(function (item) {\n      return !currNodeIdSet.has(item.id);\n    });\n  } else {\n    var filterArray = [].concat(_toConsumableArray(getChildren(node.id, selectedData.lines)), _toConsumableArray(nodeList.map(function (n) {\n      return n.id;\n    })));\n    nodes = selectedData.nodes.filter(function (item) {\n      return filterArray.indexOf(item.id) === -1;\n    });\n  }\n  return {\n    nodes: nodes,\n    lines: lines\n  };\n}\nexport var getLinesFromNode = function getLinesFromNode(allLines, nodes) {\n  if (nodes.length === 0) {\n    return [];\n  }\n  var set = new Set(nodes.map(function (n) {\n    return n.id;\n  }));\n  return allLines.filter(function (line) {\n    return set.has(line.start.split('-')[0]) && set.has(line.end.split('-')[0]);\n  });\n};\nvar getCombineNodes = function getCombineNodes(data, combineId) {\n  if (!combineId) {\n    return [];\n  }\n  return data.nodes.filter(function (item) {\n    return item.combineId === combineId;\n  });\n};\n\n/**\n * 选中规则：\n * 1. CTRL/COMMAND: 选中当前节点，并同时选中在已选节点中与当前节点呈父子关系的连线\n * 2. CTRL/COMMAND + SHIFT: 选中当前节点，并同时选中子节点及同子节点的连线\n */\nvar selectNodes = function selectNodes(_ref) {\n  var data = _ref.data,\n    selectedData = _ref.selectedData;\n  function hasSelected(node) {\n    return selectedData.nodes.find(function (item) {\n      return item.id === node.id;\n    }) !== undefined;\n  }\n  return function (_ref2) {\n    var node = _ref2.node,\n      mode = _ref2.mode;\n    if (mode === SelectMode.SINGLE) {\n      return {\n        nodes: [node],\n        lines: []\n      };\n    }\n    var currWillSelectNodeList = getCombineNodes(data, node.combineId); // 当前节点的合并节点\n    var hasCombineNode = currWillSelectNodeList.length > 0;\n    if (!hasCombineNode) {\n      currWillSelectNodeList.push(node);\n    }\n    // 选中的组件中是否有拖拽子节点的组件\n    var hasChildNodeList = currWillSelectNodeList.filter(function (n) {\n      return n.dragChild || isMatchKeyValue(n, 'dragChild', true);\n    });\n    var shouldSelectNodeSet = new Set(currWillSelectNodeList.map(function (item) {\n      return item.id;\n    }));\n\n    // 原先已经选择了的节点\n    var didSelectedNodesId = selectedData.nodes.map(function (item) {\n      return item.id;\n    });\n    var didSelectedNodeIdSet = new Set(didSelectedNodesId);\n\n    // 子节点数组\n    var childNodeList = [];\n    hasChildNodeList.forEach(function (curNode) {\n      var childIds = data.lines.filter(function (n) {\n        return n.start.split('-')[0] === curNode.id;\n      }).map(function (n) {\n        return n.end;\n      });\n      var childNodes = data.nodes.filter(function (n) {\n        return !shouldSelectNodeSet.has(n.id) && childIds.indexOf(n.id) > -1;\n      });\n      childNodeList.push.apply(childNodeList, _toConsumableArray(childNodes));\n    });\n    // eslint-disable-next-line no-shadow\n    childNodeList.forEach(function (node) {\n      if (shouldSelectNodeSet.has(node.id)) {\n        return;\n      }\n      currWillSelectNodeList.push(node);\n      shouldSelectNodeSet.add(node.id);\n    });\n    if (hasSelected(node)) {\n      return cancelSelect({\n        selectedData: selectedData,\n        mode: mode,\n        node: node,\n        nodeList: _toConsumableArray(currWillSelectNodeList),\n        data: data\n      });\n    }\n    var children = getChildren(node.id, data.lines);\n    var selectedChildren = _.intersection(children, didSelectedNodesId);\n    var shouldSelectedLines = getLinesFromNode(data.lines, currWillSelectNodeList);\n    if (mode === SelectMode.NORMAL || mode === SelectMode.RIGHT_NORMAL) {\n      return {\n        nodes: currWillSelectNodeList,\n        lines: shouldSelectedLines\n      };\n    }\n    if (mode === SelectMode.MUL_NORMAL || mode === SelectMode.BOX_SELECTION) {\n      var _resNodes = data.nodes.filter(function (item) {\n        return shouldSelectNodeSet.has(item.id) || didSelectedNodeIdSet.has(item.id);\n      });\n      return {\n        nodes: _resNodes,\n        lines: getLinesFromNode(data.lines, _resNodes)\n      };\n    }\n    // 复选模式下选中节点同时选中节点的子节点及关系线段\n    var unSelectedChildren = _.difference(children, selectedChildren);\n    // eslint-disable-next-line array-callback-return\n    data.nodes.filter(function (item) {\n      if (unSelectedChildren.indexOf(item.id) > -1) {\n        didSelectedNodeIdSet.add(item.id);\n      }\n    });\n    var resNodes = data.nodes.filter(function (item) {\n      return shouldSelectNodeSet.has(item.id) || didSelectedNodeIdSet.has(item.id);\n    });\n    return {\n      nodes: resNodes,\n      lines: getLinesFromNode(data.lines, resNodes)\n    };\n  };\n};\nexport default selectNodes;",{"version":3,"names":["_","isMatchKeyValue","SelectMode","getChildren","parent","lines","map","item","_item$start$split","start","split","_item$start$split2","_slicedToArray","_parent","end","filter","cancelSelect","params","selectedData","mode","node","nodeList","NORMAL","nodes","currNodeIdSet","Set","id","forEach","n","add","has","MUL_NORMAL","BOX_SELECTION","filterArray","concat","_toConsumableArray","indexOf","getLinesFromNode","allLines","length","set","line","getCombineNodes","data","combineId","selectNodes","_ref","hasSelected","find","undefined","_ref2","SINGLE","currWillSelectNodeList","hasCombineNode","push","hasChildNodeList","dragChild","shouldSelectNodeSet","didSelectedNodesId","didSelectedNodeIdSet","childNodeList","curNode","childIds","childNodes","apply","children","selectedChildren","intersection","shouldSelectedLines","RIGHT_NORMAL","resNodes","unSelectedChildren","difference"],"sources":["/Users/zhangtengjin/Desktop/byai/topology/src/lib/utils/selectNodes.ts"],"sourcesContent":["/* eslint-disable no-debugger */\nimport _ from 'lodash';\nimport { isMatchKeyValue } from '.';\nimport { ITopologyData, ITopologyNode, ITopologyLine } from '../declare';\n\ninterface PremiseParams {\n    data: ITopologyData;\n    selectedData: ITopologyData;\n}\n\nexport enum SelectMode {\n    /** 只会选中单个节点 */\n    SINGLE,\n    /** 会选中当前节点以及同组件其他节点 */\n    NORMAL,\n    MUL_NORMAL,\n    MULTI,\n    RIGHT_NORMAL,\n    /** 框选 */\n    BOX_SELECTION\n}\n\nexport interface ProduceselectedDataFunc {\n    (params: {\n        node: ITopologyNode;\n        mode: SelectMode;\n    }): ITopologyData;\n}\n\ninterface SelectNodesFunc {\n    (param: PremiseParams): ProduceselectedDataFunc;\n}\n\nfunction getChildren(parent: string, lines: ITopologyLine[]) {\n    return lines.map((item) => {\n        const [_parent] = item.start.split('-');\n        if (_parent === parent) {\n            return item.end;\n        }\n        return null;\n    }).filter(item => item !== null);\n}\n\n/** 取消选中节点 */\nfunction cancelSelect(params: {\n    selectedData: ITopologyData;\n    mode: SelectMode;\n    node: ITopologyNode;\n    nodeList: ITopologyNode[];\n    data: ITopologyData;\n}) {\n    const {\n        selectedData,\n        mode,\n        node,\n        nodeList,\n    } = params;\n    if (mode === SelectMode.NORMAL) {\n        return { nodes: [], lines: [] };\n    }\n    const currNodeIdSet = new Set(node.id);\n    nodeList.forEach(n => currNodeIdSet.add(n.id));\n    const lines = selectedData.lines.filter((item) => {\n        if (currNodeIdSet.has(item.end)) {\n            return false;\n        }\n        if (currNodeIdSet.has(item.start.split('-')[0])) {\n            return false;\n        }\n        return true;\n    });\n    let nodes;\n    if (mode === SelectMode.MUL_NORMAL || mode === SelectMode.BOX_SELECTION) {\n        nodes = selectedData.nodes.filter(item => !currNodeIdSet.has(item.id));\n    } else {\n        const filterArray = [...getChildren(node.id, selectedData.lines), ...nodeList.map(n => n.id)];\n        nodes = selectedData.nodes.filter(item => filterArray.indexOf(item.id) === -1);\n    }\n    return { nodes, lines };\n}\n\nexport const getLinesFromNode = (allLines: ITopologyLine[], nodes: ITopologyNode[]) => {\n    if (nodes.length === 0) {\n        return [];\n    }\n    const set = new Set(nodes.map(n => n.id));\n    return allLines.filter(line => set.has(line.start.split('-')[0]) && set.has(line.end.split('-')[0]));\n};\n\nconst getCombineNodes = (data: ITopologyData, combineId: string) => {\n    if (!combineId) {\n        return [];\n    }\n    return data.nodes.filter(item => item.combineId === combineId);\n};\n\n/**\n * 选中规则：\n * 1. CTRL/COMMAND: 选中当前节点，并同时选中在已选节点中与当前节点呈父子关系的连线\n * 2. CTRL/COMMAND + SHIFT: 选中当前节点，并同时选中子节点及同子节点的连线\n */\nconst selectNodes: SelectNodesFunc = ({ data, selectedData }) => {\n    function hasSelected(node: ITopologyNode) {\n        return selectedData.nodes.find(item => item.id === node.id) !== undefined;\n    }\n\n    return ({ node, mode }) => {\n        if (mode === SelectMode.SINGLE) {\n            return { nodes: [node], lines: [] };\n        }\n\n\n        const currWillSelectNodeList = getCombineNodes(data, node.combineId); // 当前节点的合并节点\n        const hasCombineNode = currWillSelectNodeList.length > 0;\n        if (!hasCombineNode) {\n            currWillSelectNodeList.push(node);\n        }\n        // 选中的组件中是否有拖拽子节点的组件\n        const hasChildNodeList = currWillSelectNodeList.filter(n => n.dragChild || isMatchKeyValue(n, 'dragChild', true));\n\n        const shouldSelectNodeSet = new Set(currWillSelectNodeList.map(item => item.id));\n\n        // 原先已经选择了的节点\n        const didSelectedNodesId = selectedData.nodes.map(item => item.id);\n        const didSelectedNodeIdSet = new Set(didSelectedNodesId);\n\n        // 子节点数组\n        const childNodeList = [];\n        hasChildNodeList.forEach((curNode) => {\n            const childIds = data.lines.filter(n => n.start.split('-')[0] === curNode.id).map(n => n.end);\n            const childNodes = data.nodes.filter(n => !shouldSelectNodeSet.has(n.id) && childIds.indexOf(n.id) > -1);\n            childNodeList.push(...childNodes);\n        });\n        // eslint-disable-next-line no-shadow\n        childNodeList.forEach((node) => {\n            if (shouldSelectNodeSet.has(node.id)) {\n                return;\n            }\n            currWillSelectNodeList.push(node);\n            shouldSelectNodeSet.add(node.id);\n        });\n        if (hasSelected(node)) {\n            return cancelSelect({\n                selectedData, mode, node, nodeList: [...currWillSelectNodeList], data\n            });\n        }\n        const children = getChildren(node.id, data.lines);\n        const selectedChildren = _.intersection(children, didSelectedNodesId);\n        const shouldSelectedLines = getLinesFromNode(data.lines, currWillSelectNodeList);\n\n        if (mode === SelectMode.NORMAL || mode === SelectMode.RIGHT_NORMAL) {\n            return {\n                nodes: currWillSelectNodeList,\n                lines: shouldSelectedLines,\n            };\n        }\n        if (mode === SelectMode.MUL_NORMAL || mode === SelectMode.BOX_SELECTION) {\n            const resNodes = data.nodes.filter(item => shouldSelectNodeSet.has(item.id) || didSelectedNodeIdSet.has(item.id));\n            return {\n                nodes: resNodes,\n                lines: getLinesFromNode(data.lines, resNodes),\n            };\n        }\n        // 复选模式下选中节点同时选中节点的子节点及关系线段\n        const unSelectedChildren = _.difference(children, selectedChildren);\n        // eslint-disable-next-line array-callback-return\n        data.nodes.filter((item) => {\n            if (unSelectedChildren.indexOf(item.id) > -1) {\n                didSelectedNodeIdSet.add(item.id);\n            }\n        });\n        const resNodes = data.nodes.filter(item => shouldSelectNodeSet.has(item.id) || didSelectedNodeIdSet.has(item.id));\n        return {\n            nodes: resNodes,\n            lines: getLinesFromNode(data.lines, resNodes),\n        };\n    };\n};\n\nexport default selectNodes;\n"],"mappings":"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"}]}